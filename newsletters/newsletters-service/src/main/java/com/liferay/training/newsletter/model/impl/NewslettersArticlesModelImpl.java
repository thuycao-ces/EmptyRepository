/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.newsletter.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.training.newsletter.model.NewslettersArticles;
import com.liferay.training.newsletter.model.NewslettersArticlesModel;
import com.liferay.training.newsletter.model.NewslettersArticlesSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NewslettersArticles service. Represents a row in the &quot;NEWSLETTER_NewslettersArticles&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NewslettersArticlesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewslettersArticlesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewslettersArticlesImpl
 * @generated
 */
@JSON(strict = true)
public class NewslettersArticlesModelImpl
	extends BaseModelImpl<NewslettersArticles>
	implements NewslettersArticlesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a newsletters articles model instance should use the <code>NewslettersArticles</code> interface instead.
	 */
	public static final String TABLE_NAME = "NEWSLETTER_NewslettersArticles";

	public static final Object[][] TABLE_COLUMNS = {
		{"newslettersArticlesId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"author", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"issueNumber", Types.INTEGER},
		{"title", Types.VARCHAR}, {"content", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("newslettersArticlesId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("issueNumber", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NEWSLETTER_NewslettersArticles (newslettersArticlesId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,author VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,issueNumber INTEGER,title VARCHAR(75) null,content VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table NEWSLETTER_NewslettersArticles";

	public static final String ORDER_BY_JPQL =
		" ORDER BY newslettersArticles.newslettersArticlesId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NEWSLETTER_NewslettersArticles.newslettersArticlesId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NewslettersArticles toModel(
		NewslettersArticlesSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		NewslettersArticles model = new NewslettersArticlesImpl();

		model.setNewslettersArticlesId(soapModel.getNewslettersArticlesId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setAuthor(soapModel.getAuthor());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setIssueNumber(soapModel.getIssueNumber());
		model.setTitle(soapModel.getTitle());
		model.setContent(soapModel.getContent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NewslettersArticles> toModels(
		NewslettersArticlesSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<NewslettersArticles> models = new ArrayList<NewslettersArticles>(
			soapModels.length);

		for (NewslettersArticlesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public NewslettersArticlesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _newslettersArticlesId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNewslettersArticlesId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _newslettersArticlesId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NewslettersArticles.class;
	}

	@Override
	public String getModelClassName() {
		return NewslettersArticles.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NewslettersArticles, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NewslettersArticles, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewslettersArticles, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NewslettersArticles)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NewslettersArticles, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NewslettersArticles, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NewslettersArticles)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NewslettersArticles, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NewslettersArticles, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, NewslettersArticles>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			NewslettersArticles.class.getClassLoader(),
			NewslettersArticles.class, ModelWrapper.class);

		try {
			Constructor<NewslettersArticles> constructor =
				(Constructor<NewslettersArticles>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<NewslettersArticles, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<NewslettersArticles, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<NewslettersArticles, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<NewslettersArticles, Object>>();
		Map<String, BiConsumer<NewslettersArticles, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<NewslettersArticles, ?>>();

		attributeGetterFunctions.put(
			"newslettersArticlesId",
			NewslettersArticles::getNewslettersArticlesId);
		attributeSetterBiConsumers.put(
			"newslettersArticlesId",
			(BiConsumer<NewslettersArticles, Long>)
				NewslettersArticles::setNewslettersArticlesId);
		attributeGetterFunctions.put(
			"groupId", NewslettersArticles::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<NewslettersArticles, Long>)
				NewslettersArticles::setGroupId);
		attributeGetterFunctions.put(
			"companyId", NewslettersArticles::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<NewslettersArticles, Long>)
				NewslettersArticles::setCompanyId);
		attributeGetterFunctions.put("userId", NewslettersArticles::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<NewslettersArticles, Long>)
				NewslettersArticles::setUserId);
		attributeGetterFunctions.put("author", NewslettersArticles::getAuthor);
		attributeSetterBiConsumers.put(
			"author",
			(BiConsumer<NewslettersArticles, String>)
				NewslettersArticles::setAuthor);
		attributeGetterFunctions.put(
			"createDate", NewslettersArticles::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<NewslettersArticles, Date>)
				NewslettersArticles::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", NewslettersArticles::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<NewslettersArticles, Date>)
				NewslettersArticles::setModifiedDate);
		attributeGetterFunctions.put(
			"issueNumber", NewslettersArticles::getIssueNumber);
		attributeSetterBiConsumers.put(
			"issueNumber",
			(BiConsumer<NewslettersArticles, Integer>)
				NewslettersArticles::setIssueNumber);
		attributeGetterFunctions.put("title", NewslettersArticles::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<NewslettersArticles, String>)
				NewslettersArticles::setTitle);
		attributeGetterFunctions.put(
			"content", NewslettersArticles::getContent);
		attributeSetterBiConsumers.put(
			"content",
			(BiConsumer<NewslettersArticles, String>)
				NewslettersArticles::setContent);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getNewslettersArticlesId() {
		return _newslettersArticlesId;
	}

	@Override
	public void setNewslettersArticlesId(long newslettersArticlesId) {
		_newslettersArticlesId = newslettersArticlesId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_author == null) {
			return "";
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Integer getIssueNumber() {
		return _issueNumber;
	}

	@Override
	public void setIssueNumber(Integer issueNumber) {
		_issueNumber = issueNumber;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NewslettersArticles.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NewslettersArticles toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NewslettersArticles>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NewslettersArticlesImpl newslettersArticlesImpl =
			new NewslettersArticlesImpl();

		newslettersArticlesImpl.setNewslettersArticlesId(
			getNewslettersArticlesId());
		newslettersArticlesImpl.setGroupId(getGroupId());
		newslettersArticlesImpl.setCompanyId(getCompanyId());
		newslettersArticlesImpl.setUserId(getUserId());
		newslettersArticlesImpl.setAuthor(getAuthor());
		newslettersArticlesImpl.setCreateDate(getCreateDate());
		newslettersArticlesImpl.setModifiedDate(getModifiedDate());
		newslettersArticlesImpl.setIssueNumber(getIssueNumber());
		newslettersArticlesImpl.setTitle(getTitle());
		newslettersArticlesImpl.setContent(getContent());

		newslettersArticlesImpl.resetOriginalValues();

		return newslettersArticlesImpl;
	}

	@Override
	public int compareTo(NewslettersArticles newslettersArticles) {
		long primaryKey = newslettersArticles.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NewslettersArticles)) {
			return false;
		}

		NewslettersArticles newslettersArticles = (NewslettersArticles)obj;

		long primaryKey = newslettersArticles.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		NewslettersArticlesModelImpl newslettersArticlesModelImpl = this;

		newslettersArticlesModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<NewslettersArticles> toCacheModel() {
		NewslettersArticlesCacheModel newslettersArticlesCacheModel =
			new NewslettersArticlesCacheModel();

		newslettersArticlesCacheModel.newslettersArticlesId =
			getNewslettersArticlesId();

		newslettersArticlesCacheModel.groupId = getGroupId();

		newslettersArticlesCacheModel.companyId = getCompanyId();

		newslettersArticlesCacheModel.userId = getUserId();

		newslettersArticlesCacheModel.author = getAuthor();

		String author = newslettersArticlesCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			newslettersArticlesCacheModel.author = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			newslettersArticlesCacheModel.createDate = createDate.getTime();
		}
		else {
			newslettersArticlesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			newslettersArticlesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			newslettersArticlesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		newslettersArticlesCacheModel.issueNumber = getIssueNumber();

		newslettersArticlesCacheModel.title = getTitle();

		String title = newslettersArticlesCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			newslettersArticlesCacheModel.title = null;
		}

		newslettersArticlesCacheModel.content = getContent();

		String content = newslettersArticlesCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			newslettersArticlesCacheModel.content = null;
		}

		return newslettersArticlesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NewslettersArticles, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NewslettersArticles, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewslettersArticles, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((NewslettersArticles)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<NewslettersArticles, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<NewslettersArticles, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewslettersArticles, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((NewslettersArticles)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NewslettersArticles>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _newslettersArticlesId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _author;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Integer _issueNumber;
	private String _title;
	private String _content;
	private NewslettersArticles _escapedModel;

}